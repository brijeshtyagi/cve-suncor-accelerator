terraform {
  required_providers {
    azurerm = {
      source = "hashicorp/azurerm"
    }
  }

  backend "azurerm" {}
}

provider "azurerm" {
  features {
    key_vault {
      purge_soft_delete_on_destroy               = true
      purge_soft_deleted_certificates_on_destroy = true
      purge_soft_deleted_keys_on_destroy         = true
      purge_soft_deleted_secrets_on_destroy      = true
    }
    resource_group {
      prevent_deletion_if_contains_resources = false
    }
  }
}

module "resource-group" {
  source   = "../modules/resource-group"
  name     = var.global_settings.rg_name
  location = var.global_settings.rg_location
  tags     = var.global_settings.tags
}

resource "azurerm_user_assigned_identity" "uai" {
  name                = var.global_settings.uai_name
  resource_group_name = module.resource-group.name
  location            = module.resource-group.location
  tags                = module.resource-group.tags

  lifecycle {
    ignore_changes = [
      tags["LastModifiedBy"],
      tags["LastModifiedTime"]
    ]
  }
}

resource "azurerm_log_analytics_workspace" "log" {
  name                = var.log_config.name
  resource_group_name = module.resource-group.name
  location            = module.resource-group.location
  tags                = module.resource-group.tags
  sku                 = "PerGB2018"

  lifecycle {
    ignore_changes = [
      tags["LastModifiedBy"],
      tags["LastModifiedTime"]
    ]
  }
}

module "vnet" {
  source              = "../modules/vnet"
  resource_group_name = module.resource-group.name
  location            = module.resource-group.location
  tags                = module.resource-group.tags

  vnetwork_name      = var.vnet_config.name
  vnet_address_space = var.vnet_config.address_space
  subnets            = var.vnet_config.subnets
}

module "databricks" {
  source                         = "../modules/databricks"
  resource_group_name            = module.resource-group.name
  location                       = module.resource-group.location
  tags                           = module.resource-group.tags
  name                           = var.databricks_config.name
  sku                            = var.databricks_config.sku
  managed_resource_group_name    = var.databricks_config.managed_resource_group_name
  virtual_network_id             = module.vnet.virtual_network_id
  virtual_network_name           = module.vnet.virtual_network_name
  container_subnet_cidr          = var.databricks_config.container_subnet_cidr
  host_subnet_cidr               = var.databricks_config.host_subnet_cidr
  access_connector_name          = var.databricks_config.access_connector_name
  metastore_container_name       = var.databricks_config.metastore_container_name
  metastore_storage_account_id   = module.storage-account.storage_account_id
  metastore_storage_account_name = module.storage-account.storage_account_name
}

module "databricks_diagnostics" {
  source              = "../modules/diagnostic-setting"
  name                = "diagnostics"
  resource_group_name = module.resource-group.name
  target_resource_id  = module.databricks.id
  log_id              = azurerm_log_analytics_workspace.log.id
  log_categories      = []
  log_category_groups = ["audit", "allLogs"]
  metrics             = ["AllMetrics"]
}

module "storage-account" {
  source                   = "../modules/storage-account"
  resource_group_name      = module.resource-group.name
  location                 = module.resource-group.location
  tags                     = module.resource-group.tags
  storage_account_name     = var.sa_config.name
  account_tier             = var.sa_config.tier
  is_hns_enabled           = var.sa_config.enabled_hierarchical_namespace
  account_replication_type = var.sa_config.replication_type
  containers_list          = var.sa_config.containers
  account_kind             = var.sa_config.kind
  network_rules            = var.sa_config.network_rules
  current_ip               = var.sa_config.network_rules != null ? var.current_ip : null
  user_mi_object_id        = [azurerm_user_assigned_identity.uai.id]
  subnet_ids               = [module.databricks.host_subnet_id, module.databricks.container_subnet_id]
}

module "kv" {
  source              = "../modules/key-vault"
  resource_group_name = module.resource-group.name
  location            = module.resource-group.location
  tags                = module.resource-group.tags
  name                = var.kv_config.name
  tenant_id           = var.global_settings.tenant_id
  default_action      = var.kv_config.default_action
  allowed_ips         = var.kv_config.allowed_ips
  current_ip          = var.current_ip
  allowed_subnet_ids  = var.kv_config.allowed_subnet_ids
  access_policies     = var.kv_config.access_policies
  purge_protection    = var.kv_config.purge_protection
}

module "kv_diagnostics" {
  source              = "../modules/diagnostic-setting"
  name                = "diagnostics"
  resource_group_name = module.resource-group.name
  target_resource_id  = module.kv.id
  log_id              = azurerm_log_analytics_workspace.log.id
  log_categories      = []
  log_category_groups = ["audit", "allLogs"]
  metrics             = ["AllMetrics"]
}

module "data-factory" {
  source                   = "../modules/data-factory"
  resource_group_name      = module.resource-group.name
  location                 = module.resource-group.location
  tags                     = module.resource-group.tags
  name                     = var.adf_config.name
  gh_config                = var.adf_config.gh_config
  tenant_id                = var.global_settings.tenant_id
  user_mi_object_id        = azurerm_user_assigned_identity.uai.id
  storage_account_id       = module.storage-account.storage_account_id
  key_vault_name           = var.kv_config.name
  adfmi_secret_permissions = var.adf_config.kv_secret_permissions

  depends_on = [module.kv]
}

module "adf_diagnostics" {
  source              = "../modules/diagnostic-setting"
  name                = "diagnostics"
  resource_group_name = module.resource-group.name
  target_resource_id  = module.data-factory.id
  log_id              = azurerm_log_analytics_workspace.log.id
  log_categories      = []
  log_category_groups = ["audit", "allLogs"]
  metrics             = ["AllMetrics"]
  retention_days      = 0
}

module "sql-server" {
  source                 = "../modules/sql-server"
  for_each               = var.sql_config.sqlinstance
  resource_group_name    = module.resource-group.name
  location               = module.resource-group.location
  tags                   = module.resource-group.tags
  sql_server_name        = each.value.sqlservername
  database_name          = each.value.dbname
  sql_ad_admin_username  = each.value.sql_ad_admin
  sql_ad_admin_object_id = each.value.sql_ad_admin_object_id
  sql_firewall_rules     = each.value.sql_firewall_rules
  access_token           = var.access_token
  sku_name               = each.value.sku_name
  read_scale             = each.value.read_scale
  zone_redundant         = each.value.zone_redundant
  max_size_gb            = each.value.max_size_gb
  user_mi_client_id      = azurerm_user_assigned_identity.uai.client_id
  sql_ad_uai             = azurerm_user_assigned_identity.uai.name
  key_vault_name         = module.kv.name
}

# module "synapse" {
#   source              = "../modules/synapse"
#   resource_group_name = module.resource-group.name
#   location            = module.resource-group.location
#   tags                = module.resource-group.tags
#   name                = var.synapse_config.synapse_name
#   pool_name           = var.synapse_config.synapse_pool_name
#   key_vault_name      = module.kv.name
#   storage_account_id  = module.storage-account.storage_account_id
#   sql_ad_uai          = azurerm_user_assigned_identity.uai.name
#   user_mi_object_id   = azurerm_user_assigned_identity.uai.id
#   user_mi_client_id   = azurerm_user_assigned_identity.uai.client_id
#   azuread_admin       = var.synapse_config.azuread_admin
#   azuread_app_id      = var.synapse_config.azuread_app_id
#   firewall_rules      = var.synapse_config.synapse_firewall_rules
#   access_token        = var.access_token
# }
