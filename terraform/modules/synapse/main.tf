data "azurerm_key_vault" "kv" {
  name                = var.key_vault_name
  resource_group_name = var.resource_group_name
}

resource "time_offset" "credential_expiration" {
  offset_years = var.credential_expiration
}

resource "random_password" "password" {
  length           = 18
  upper            = true
  numeric          = true
  special          = true
  override_special = "_%@$"
}

resource "azurerm_key_vault_secret" "kv_secret" {
  name         = "${var.synapse_name}--password"
  value        = random_password.password.result
  key_vault_id = data.azurerm_key_vault.kv.id
  # Check: CKV_AZURE_41: "Ensure that the expiration date is set on all secrets"
  # Guide: https://docs.bridgecrew.io/docs/set-an-expiration-date-on-all-secrets
  expiration_date = time_offset.credential_expiration.rfc3339

  # Check: CKV_AZURE_114: "Ensure that key vault secrets have "content_type" set"
  # Guide: https://docs.bridgecrew.io/docs/ensure-that-key-vault-secrets-have-content_type-set
  content_type = "text/plain"
  tags         = var.tags

  depends_on = [random_password.password]
}

resource "azurerm_storage_data_lake_gen2_filesystem" "adls" {
  name               = "adls"
  storage_account_id = var.storage_account_id
}

resource "azurerm_synapse_workspace" "synapse_ws" {
  name                                 = var.synapse_name
  resource_group_name                  = var.resource_group_name
  location                             = var.location
  storage_data_lake_gen2_filesystem_id = azurerm_storage_data_lake_gen2_filesystem.adls.id
  sql_administrator_login              = "sqladmin"
  sql_administrator_login_password     = random_password.password.result
  # Check: CKV_AZURE_157: "Ensure that Synapse workspace has data_exfiltration_protection_enabled"
  # Guide: https://docs.bridgecrew.io/docs/ensure-azure-data-exfiltration-protection-for-azure-synapse-workspace-is-enabled
  data_exfiltration_protection_enabled = true
  # Check: CKV_AZURE_58: "Ensure that Azure Synapse workspaces enables managed virtual networks"
  # Guide: https://docs.bridgecrew.io/docs/ensure-that-azure-synapse-workspaces-enables-managed-virtual-networks
  managed_virtual_network_enabled = true
  tags                            = var.tags

  identity {
    type         = "SystemAssigned, UserAssigned"
    identity_ids = [var.user_mi_object_id]
  }

  lifecycle {
    ignore_changes = [
      tags["LastModifiedBy"],
      tags["LastModifiedTime"]
    ]
  }
}

resource "azurerm_synapse_workspace_aad_admin" "synapse_aad" {
  synapse_workspace_id = azurerm_synapse_workspace.synapse_ws.id
  login                = var.azuread_admin
  object_id            = var.azuread_app_id
  tenant_id            = var.tenant_id

  depends_on = [azurerm_synapse_workspace.synapse_ws]
}

resource "azurerm_synapse_sql_pool" "synapse_sql_pool" {
  name                 = var.synapse_pool_name
  synapse_workspace_id = azurerm_synapse_workspace.synapse_ws.id
  sku_name             = "DW100c"
  create_mode          = "Default"
  data_encrypted       = true
  tags                 = var.tags

  lifecycle {
    ignore_changes = [
      tags["LastModifiedBy"],
      tags["LastModifiedTime"]
    ]
  }
}

resource "azurerm_synapse_firewall_rule" "synapse_firewall_rules" {
  for_each             = var.synapse_firewall_rules
  name                 = each.key
  synapse_workspace_id = azurerm_synapse_workspace.synapse_ws.id
  start_ip_address     = cidrhost(each.value, 0)
  end_ip_address       = cidrhost(each.value, -1)

  depends_on = [azurerm_synapse_workspace.synapse_ws, azurerm_synapse_sql_pool.synapse_sql_pool, azurerm_synapse_workspace_aad_admin.synapse_aad]
}

resource "azurerm_synapse_firewall_rule" "host_ip_address" {
  count                = var.current_ip != null ? 1 : 0
  name                 = "Host_IPAddress"
  synapse_workspace_id = azurerm_synapse_workspace.synapse_ws.id
  start_ip_address     = var.current_ip
  end_ip_address       = var.current_ip

  depends_on = [azurerm_synapse_workspace.synapse_ws, azurerm_synapse_sql_pool.synapse_sql_pool, azurerm_synapse_workspace_aad_admin.synapse_aad]
}

resource "azurerm_synapse_firewall_rule" "AllowAllWindowsAzureIps" {
  name                 = "AllowAllWindowsAzureIps"
  synapse_workspace_id = azurerm_synapse_workspace.synapse_ws.id
  start_ip_address     = "0.0.0.0"
  end_ip_address       = "0.0.0.0"

  depends_on = [azurerm_synapse_workspace.synapse_ws, azurerm_synapse_sql_pool.synapse_sql_pool, azurerm_synapse_workspace_aad_admin.synapse_aad]
}

resource "null_resource" "run_add_aduser" {
  depends_on = [
    azurerm_synapse_workspace.synapse_ws,
    azurerm_synapse_sql_pool.synapse_sql_pool,
    azurerm_synapse_firewall_rule.synapse_firewall_rules,
    azurerm_synapse_firewall_rule.host_ip_address
  ]

  provisioner "local-exec" {
    command = <<EOT
      ../modules/synapse/ps/AddADUser-dbowner.ps1 -azureADUser ${var.sql_ad_uai} -accessToken "${var.access_token != null ? var.access_token : ""}" -umi_client_id ${var.user_mi_client_id} -SQLServerName ${var.synapse_name} -databaseName ${var.synapse_pool_name}

EOT

    interpreter = ["pwsh", "-Command"]
  }
}
