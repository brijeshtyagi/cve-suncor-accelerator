data "azurerm_key_vault" "kv" {
  name                = var.key_vault_name
  resource_group_name = var.resource_group_name
}

resource "time_offset" "credential_expiration" {
  offset_years = var.credential_expiration
}

resource "random_password" "password" {
  length           = 18
  upper            = true
  numeric          = true
  special          = true
  override_special = "_%@$"
}

resource "azurerm_key_vault_secret" "kv_secret" {
  name         = "${var.sql_server_name}-sqladmin--password"
  value        = random_password.password.result
  key_vault_id = data.azurerm_key_vault.kv.id
  # Check: CKV_AZURE_41: "Ensure that the expiration date is set on all secrets"
  # Guide: https://docs.bridgecrew.io/docs/set-an-expiration-date-on-all-secrets
  expiration_date = time_offset.credential_expiration.rfc3339

  # Check: CKV_AZURE_114: "Ensure that key vault secrets have "content_type" set"
  # Guide: https://docs.bridgecrew.io/docs/ensure-that-key-vault-secrets-have-content_type-set
  content_type = "text/plain"
  tags         = var.tags

  depends_on = [random_password.password]
}

resource "azurerm_mssql_server" "server" {
  name                         = var.sql_server_name
  resource_group_name          = var.resource_group_name
  location                     = var.location
  version                      = var.sql_server_version
  administrator_login          = "sqladmin"
  administrator_login_password = random_password.password.result
  minimum_tls_version          = "1.2"

  azuread_administrator {
    login_username = var.sql_ad_admin_username
    object_id      = var.sql_ad_admin_object_id
  }

  tags = var.tags

  lifecycle {
    ignore_changes = [
      tags["LastModifiedBy"],
      tags["LastModifiedTime"]
    ]
  }

  depends_on = [random_password.password]
}

resource "azurerm_mssql_server_transparent_data_encryption" "sql_transparent_data_encryption" {
  server_id = azurerm_mssql_server.server.id
}

resource "azurerm_mssql_database" "database" {
  name           = var.database_name
  server_id      = azurerm_mssql_server.server.id
  collation      = "SQL_Latin1_General_CP1_CI_AS"
  max_size_gb    = var.max_size_gb
  read_scale     = var.read_scale
  sku_name       = var.sku_name
  zone_redundant = var.zone_redundant
  tags           = var.tags

  lifecycle {
    ignore_changes = [
      tags["LastModifiedBy"],
      tags["LastModifiedTime"]
    ]
  }
}

resource "azurerm_mssql_firewall_rule" "sql_firewall_rules" {
  for_each         = var.sql_firewall_rules
  name             = each.key
  server_id        = azurerm_mssql_server.server.id
  start_ip_address = cidrhost(each.value, 0)
  end_ip_address   = cidrhost(each.value, -1)

  depends_on = [azurerm_mssql_server.server]
}

resource "azurerm_mssql_firewall_rule" "host_ip_address" {
  count            = var.current_ip != null ? 1 : 0
  name             = "Host_IPAddress"
  server_id        = azurerm_mssql_server.server.id
  start_ip_address = var.current_ip
  end_ip_address   = var.current_ip

  depends_on = [azurerm_mssql_server.server]
}

resource "azurerm_mssql_firewall_rule" "allowallwindowsazureips" {
  name             = "AllowAllWindowsAzureIps"
  server_id        = azurerm_mssql_server.server.id
  start_ip_address = "0.0.0.0"
  end_ip_address   = "0.0.0.0"

  depends_on = [azurerm_mssql_server.server]
}

resource "null_resource" "run_add_aduser" {
  depends_on = [
    azurerm_mssql_server.server,
    azurerm_mssql_database.database,
    azurerm_mssql_firewall_rule.sql_firewall_rules,
    azurerm_mssql_firewall_rule.host_ip_address
  ]

  provisioner "local-exec" {
    command = <<EOT
      ../modules/sql-server/ps/AddADUser-dbowner.ps1 -azureADUser ${var.sql_ad_uai} -accessToken "${var.access_token != null ? var.access_token : ""}" -umi_client_id ${var.user_mi_client_id} -SQLServerName "${var.sql_server_name}.database.windows.net" -databaseName ${var.database_name}

EOT

    interpreter = ["pwsh", "-Command"]
  }
}
