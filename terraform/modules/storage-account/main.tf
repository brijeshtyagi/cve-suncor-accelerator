#---------------------------------------------------------
# Storage Account Creation or selection
#----------------------------------------------------------
resource "azurerm_storage_account" "storeacc" {
  # Check: CKV_AZURE_43: "Ensure Storage Accounts adhere to the naming rules"
  # Guide: https://docs.bridgecrew.io/docs/ensure-storage-accounts-adhere-to-the-naming-rules
  # Naming rules:
  # 1. Names must be between 3 and 24 characters long
  # 2. Names may contain numbers and lowercase letters only
  # 3. Storage account name must be unique
  name                      = var.storage_account_name
  resource_group_name       = var.resource_group_name
  location                  = var.location
  account_kind              = var.account_kind
  account_tier              = var.account_tier
  account_replication_type  = var.account_replication_type
  enable_https_traffic_only = true
  min_tls_version           = var.min_tls_version
  is_hns_enabled            = var.is_hns_enabled

  tags = var.tags

  blob_properties {
    delete_retention_policy {
      days = var.delete_retention_policy_default
    }
    container_delete_retention_policy {
      days = var.container_delete_retention_policy_default
    }
  }

  identity {
    type         = var.user_mi_object_id != null ? "SystemAssigned, UserAssigned" : "SystemAssigned"
    identity_ids = var.user_mi_object_id
  }

  lifecycle {
    ignore_changes = [
      tags["LastModifiedBy"],
      tags["LastModifiedTime"]
    ]
  }
}

resource "azurerm_storage_account_network_rules" "storage_account_network_rules" {
  storage_account_id = azurerm_storage_account.storeacc.id
  # Check: CKV_AZURE_35: "Ensure default network access rule for Storage Accounts is set to deny"
  # Guide: https://docs.bridgecrew.io/docs/set-default-network-access-rule-for-storage-accounts-to-deny
  default_action = "Deny"
  # Check: CKV_AZURE_36: "Ensure 'Trusted Microsoft Services' is enabled for Storage Account access"
  # Guide: https://docs.bridgecrew.io/docs/enable-trusted-microsoft-services-for-storage-account-access
  bypass                     = concat(["AzureServices"], var.network_rules.bypass)
  ip_rules                   = var.current_ip != null ? concat(var.network_rules.ip_rules, [var.current_ip]) : var.network_rules.ip_rules
  virtual_network_subnet_ids = var.subnet_ids

  # NOTE The order here matters: We cannot create storage
  # containers once the network rules are locked down
  depends_on = [azurerm_storage_container.container]
}

#-------------------------------
# Storage Container Creation
#-------------------------------
resource "azurerm_storage_container" "container" {
  count                 = length(var.containers_list)
  name                  = var.containers_list[count.index].name
  storage_account_name  = azurerm_storage_account.storeacc.name
  container_access_type = var.containers_list[count.index].access_type
}

#--------------------------------------
# Storage Advanced Threat Protection
#--------------------------------------
resource "azurerm_advanced_threat_protection" "atp" {
  target_resource_id = azurerm_storage_account.storeacc.id
  enabled            = true
}

#-------------------------------
# Storage Fileshare Creation
#-------------------------------
resource "azurerm_storage_share" "fileshare" {
  count                = length(var.file_shares)
  name                 = var.file_shares[count.index].name
  storage_account_name = azurerm_storage_account.storeacc.name
  quota                = var.file_shares[count.index].quota
}

#-------------------------------
# Storage Tables Creation
#-------------------------------
resource "azurerm_storage_table" "tables" {
  count                = length(var.tables)
  name                 = var.tables[count.index]
  storage_account_name = azurerm_storage_account.storeacc.name
}

#-------------------------------
# Storage Queue Creation
#-------------------------------
resource "azurerm_storage_queue" "queues" {
  count                = length(var.queues)
  name                 = var.queues[count.index]
  storage_account_name = azurerm_storage_account.storeacc.name
}

#-------------------------------
# Storage Lifecycle Management
#-------------------------------
resource "azurerm_storage_management_policy" "lcpolicy" {
  count              = length(var.lifecycles) == 0 ? 0 : 1
  storage_account_id = azurerm_storage_account.storeacc.id

  dynamic "rule" {
    for_each = var.lifecycles
    iterator = rule
    content {
      name    = "rule${rule.key}"
      enabled = true
      filters {
        prefix_match = rule.value.prefix_match
        blob_types   = ["blockBlob"]
      }
      actions {
        base_blob {
          tier_to_cool_after_days_since_modification_greater_than    = rule.value.tier_to_cool_after_days
          tier_to_archive_after_days_since_modification_greater_than = rule.value.tier_to_archive_after_days
          delete_after_days_since_modification_greater_than          = rule.value.delete_after_days
        }
        snapshot {
          delete_after_days_since_creation_greater_than = rule.value.snapshot_delete_after_days
        }
      }
    }
  }
}
