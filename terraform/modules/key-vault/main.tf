resource "azurerm_key_vault" "vault" {
  name                        = var.name
  sku_name                    = var.sku
  resource_group_name         = var.resource_group_name
  location                    = var.location
  enabled_for_disk_encryption = true
  tenant_id                   = var.tenant_id
  # Check: CKV_AZURE_110: "Ensure that key vault enables purge protection"
  # Guide: https://docs.bridgecrew.io/docs/ensure-that-key-vault-enables-purge-protection
  # Check: CKV_AZURE_42: "Ensure the key vault is recoverable"
  # Guide: https://docs.bridgecrew.io/docs/ensure-the-key-vault-is-recoverable
  purge_protection_enabled = var.purge_protection
  tags                     = var.tags

  network_acls {
    default_action             = var.default_action
    bypass                     = "AzureServices"
    ip_rules                   = var.current_ip != null ? flatten([var.allowed_ips, [var.current_ip]]) : var.allowed_ips
    virtual_network_subnet_ids = var.allowed_subnet_ids
  }

  lifecycle {
    ignore_changes = [
      tags["LastModifiedBy"],
      tags["LastModifiedTime"]
    ]
  }
}

resource "azurerm_key_vault_access_policy" "kv_access_policy" {
  key_vault_id            = azurerm_key_vault.vault.id
  tenant_id               = var.tenant_id
  for_each                = var.access_policies
  object_id               = each.value.object_id
  certificate_permissions = each.value.certificate_permissions
  key_permissions         = each.value.key_permissions
  secret_permissions      = each.value.secret_permissions
  storage_permissions     = each.value.storage_permissions

  depends_on = [null_resource.run_add_kv_firewall_rule]
}

# This will ensure host IP Address added to Firewall Rules when Purge Protection is true and KV was recovered after deletion
resource "null_resource" "run_add_kv_firewall_rule" {
  depends_on = [
    azurerm_key_vault.vault
  ]

  provisioner "local-exec" {
    command     = <<EOT
      az keyvault network-rule add --resource-group ${var.resource_group_name} --name ${var.name} --ip-address ${var.current_ip}
EOT
    interpreter = ["pwsh", "-Command"]
  }
}
