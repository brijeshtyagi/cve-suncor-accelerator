# Databricks notebook source
# MAGIC %run ../../bronze/dicom/dicom_ingestion

# COMMAND ----------

import unittest
from unittest.mock import patch, MagicMock
import datetime


class MockFileInfo:
    def __init__(self, path):
        self.path = path
        self.name = path
        self.size = 100
        self.modificationTime = datetime.datetime(2021, 1, 1)
        self.isFile = MagicMock(return_value=True)
        self.isDir = MagicMock(return_value=False)


class TestDicomIngestion(unittest.TestCase):
    """Test Class for Dicom Ingestion Library"""

    def test_read_dicom(self):
        # cant find a sample invalid dicom to test
        # cant mock a dicom file in here so we have to use dicom files to test
        status, ds = read_dicom_file(
            "../../testsautomation/bronze_tests/dicom_test_sample_file/image-000002.dcm"
        )

        self.assertEqual(status, "Valid")
        self.assertEqual(type(ds), pydicom.dataset.FileDataset)

    def test_extract_metadata(self):
        output_dict = extract_metadata(
            "../../testsautomation/bronze_tests/dicom_test_sample_file/image-000002.dcm"
        )

        self.assertEqual(
            [
                "metadata",
                "hash_value",
                "status",
                "ingestion_timestamp",
                "ingestion_date",
            ],
            list(output_dict.keys()),
        )

    @patch("__main__.dbutils")
    def test_ingest_dicom_files(self, mock_dbutils):
        data_from_config = {"ingestion_details": {"source_file_path": "some s3 path"}}
        mock_files = [
            MockFileInfo(
                "../../testsautomation/bronze_tests/dicom_test_sample_file/image-000002.dcm"
            ),
            MockFileInfo(
                "../../testsautomation/bronze_tests/dicom_test_sample_file/image-000001.dcm"
            ),
        ]
        mock_dbutils.fs.ls.return_value = mock_files

        output_df = ingest_dicom_files(data_from_config)
        display(output_df)
        self.assertEqual(
            output_df.columns,
            ["local_path", "file_name", "file_size", "mod_time", "metadata_details"],
        )
        self.assertEqual(output_df.count(), 2)


suite = unittest.TestLoader().loadTestsFromTestCase(TestDicomIngestion)
runner = unittest.TextTestRunner(verbosity=2)
print(runner.run(suite))
