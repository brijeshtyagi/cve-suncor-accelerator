# Databricks notebook source
# MAGIC %pip install pyyaml

# COMMAND ----------

import unittest
from utilities.op_utilities import get_expectation_and_quarantine_rules, get_all_data_check_rules

# COMMAND ----------

class TestOpUtilities(unittest.TestCase):
    """Test class for the op utilities module"""
    def test_get_expectation_and_quarantine_rules(self):
        sample_expectation_details = [
            {"data_validation_check": "check_value_empty", "relevant_columns": ["ID", "Name", "City"]},
            {"data_validation_check": "check_value_greater_than_or_equal", "relevant_columns": [{"file_size": 0}]}
        ]
        actual_output = get_expectation_and_quarantine_rules(sample_expectation_details)
        expected_output = {"expectation_rules": 
        {"ID IS NOT NULL": "(ID IS NOT NULL)", "Name IS NOT NULL": "(Name IS NOT NULL)",
        "City IS NOT NULL": "(City IS NOT NULL)", "file_size greater than or equal": "(file_size >= 0)"},
        "quarantine_rules": "NOT((ID IS NOT NULL) AND (Name IS NOT NULL) AND (City IS NOT NULL) AND (file_size >= 0))"
        }
        self.assertEqual(actual_output, expected_output)

    def test_get_get_all_data_check_rules(self):
        sample_yaml = [
            {"data_validation_check": "check_empty_column", "relevant_columns": ["ID", "Name", "City"]},
            {"data_validation_check": "check_bigger_value", "relevant_columns": [{"file_size": "0"}]},
            {"data_validation_check": "check_unique_value", "relevant_columns": ["ID"]}
        ]
        actual_output = get_all_data_check_rules(sample_yaml)
        expected_output = ['check_empty_column', 'check_bigger_value', 'check_unique_value']
        self.assertEqual(actual_output, expected_output)
        
suite = unittest.TestLoader().loadTestsFromTestCase(TestOpFunctions)
runner = unittest.TextTestRunner(verbosity=2)
print(runner.run(suite))
