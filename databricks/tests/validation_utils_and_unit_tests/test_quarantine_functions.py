# Databricks notebook source
# MAGIC %pip install pyyaml

# COMMAND ----------

# MAGIC %pip install freezegun

# COMMAND ----------

import utilities.op_utilities as op_utilities
import unittest
from unittest.mock import Mock, patch
from pyspark.sql import Row
from freezegun import freeze_time

# COMMAND ----------

class TestQuarantineFunctions(unittest.TestCase):
    """Test class for the quarantine functions"""

    @freeze_time("1955-11-12")
    def test_create_quarantine_records(self):
        test_data = [
            {"patient_id": 1, "name": "patient1"},
            {"patient_id": 2, "name": "patient2"},
        ]
        test_dataframe = spark.createDataFrame(test_data)
        test_quarantine_data = [{"max(id)": 2}]
        test_quarantine_df = spark.createDataFrame(test_quarantine_data)
        spark_mock = Mock()
        type(spark_mock).write = spark_mock
        type(spark_mock).read = spark_mock
        spark_mock.createDataFrame = spark.createDataFrame
        spark_mock.sql.side_effect = test_quarantine_df
        with patch("utilities.op_utilities.spark", new=spark_mock):
            output_df = op_utilities.create_quarantine_records(
                test_dataframe, "bronze", "invalid", "test_data", "test", "test"
            )
            expected_output = [
                Row(id=3,
                    dataset_state="bronze",
                    dataset_name="test_data",
                    quarantine_reason="invalid",
                    quarantine_datetime="1955-11-12 00:00:00",
                    error_record={"name": "patient1", "patient_id": "1"},
                ),
                Row(id=4,
                    dataset_state="bronze",
                    dataset_name="test_data",
                    quarantine_reason="invalid",
                    quarantine_datetime="1955-11-12 00:00:00",
                    error_record={"name": "patient2", "patient_id": "2"},
                ),
            ]

        self.assertEqual(expected_output, output_df.collect())


suite = unittest.TestLoader().loadTestsFromTestCase(TestQuarantineFunctions)
runner = unittest.TextTestRunner(verbosity=2)
print(runner.run(suite))
